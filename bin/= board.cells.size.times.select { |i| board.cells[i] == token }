
[1mFrom:[0m /home/johnfewell/code/labs/ttt-with-ai-project-v-000/lib/players/computer.rb @ line 94 Players::Computer#move:

     [1;34m93[0m: [32mdef[0m [1;34mmove[0m(board)
 =>  [1;34m94[0m:   binding.pry
     [1;34m95[0m:   [32mcase[0m board.turn_count
     [1;34m96[0m:   [32mwhen[0m [1;34m0[0m..[1;34m2[0m
     [1;34m97[0m:     free = board.cells.size.times.select { |i| board.cells[i] == [31m[1;31m"[0m[31m [1;31m"[0m[31m[0m }
     [1;34m98[0m:     free_corners = free.select { |e| e == [1;34m0[0m || e == [1;34m2[0m || e == [1;34m6[0m || e == [1;34m8[0m }
     [1;34m99[0m:     free_corners.sample.+([1;34m1[0m).to_s
    [1;34m100[0m:   [32mwhen[0m [1;34m3[0m..[1;34m7[0m
    [1;34m101[0m:     [1;34m#go through the win combinations[0m
    [1;34m102[0m:     [1;34;4mWIN_COMBINATIONS[0m.find [32mdo[0m |win|
    [1;34m103[0m:       [1;34m#and find the ones that have 2 of my tokens in them and that are on the board and a blank space and return the blank space as my move[0m
    [1;34m104[0m:      my_moves = board.cells.size.times.select { |i| board.cells[i] == token }
    [1;34m105[0m:      opp_moves = board.cells.size.times.select { |i| board.cells[i] != token && board.cells[i] != [31m[1;31m"[0m[31m [1;31m"[0m[31m[0m }
    [1;34m106[0m:      opp_wins = win - opp_moves - my_moves
    [1;34m107[0m:      leftover = win - my_moves - opp_moves
    [1;34m108[0m: 
    [1;34m109[0m:      [32mif[0m leftover.size == [1;34m1[0m
    [1;34m110[0m:        leftover.first.+([1;34m1[0m).to_s
    [1;34m111[0m:      [32melsif[0m opp_wins.size == [1;34m1[0m
    [1;34m112[0m:        opp_wins.first.+([1;34m1[0m).to_s
    [1;34m113[0m:      [32melse[0m
    [1;34m114[0m:        [[1;34m1[0m, [1;34m3[0m, [1;34m7[0m, [1;34m9[0m, [1;34m2[0m, [1;34m4[0m, [1;34m6[0m, [1;34m8[0m].detect{ |i| !board.taken?(i) }.to_s
    [1;34m115[0m:      [32mend[0m
    [1;34m116[0m:    [32mend[0m
    [1;34m117[0m:    [32mwhen[0m [1;34m8[0m
    [1;34m118[0m:      last_free = board.cells.size.times.select {|i| board.cells[i] == [31m[1;31m"[0m[31m [1;31m"[0m[31m[0m}
    [1;34m119[0m:      last_free.+([1;34m1[0m).to_s
    [1;34m120[0m:   [32mend[0m
    [1;34m121[0m: [32mend[0m

